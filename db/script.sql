/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.5 		*/
/*  Created On : 22-ago.-2020 3:32:05 a. m. 				*/
/*  DBMS       : Oracle 						*/
/* ---------------------------------------------------- */

CONNECT system/Server_252@//localhost:1521/XE;

CREATE TABLESPACE smccdef DATAFILE '/u01/app/oracle/oradata/XE/smccdef.dbf' SIZE 2m AUTOEXTEND ON; -- verificar directorio creacion tablespace
CREATE TEMPORARY TABLESPACE smcctmp TEMPFILE '/u01/app/oracle/oradata/XE/smcctmp.dbf' SIZE 2m AUTOEXTEND ON; -- verificar directorio creacion tablespace

CREATE USER usersmcc IDENTIFIED BY secreta -- usuario
DEFAULT TABLESPACE smccdef
TEMPORARY TABLESPACE smcctmp
QUOTA 2m ON smccdef;

GRANT CONNECT TO usersmcc; -- asignando privilegios para conectarse
GRANT RESOURCE TO usersmcc; -- asignando privilegios resource

/* Drop Triggers, Sequences for Autonumber Columns */

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_sgm_operacional_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_sgm_operacional_ID'; 
END IF; 
END; 

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_sgm_operacional_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_sgm_operacional_ID'; 
END IF; 
END; 

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_sgm_operativo_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_sgm_operativo_ID'; 
END IF; 
END; 

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_sgm_operativo_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_sgm_operativo_ID'; 
END IF; 
END; 

/* Drop Tables */

begin
	EXECUTE IMMEDIATE 'DROP TABLE   plantacion CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   sgm_operacional CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   sgm_operativo CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  
/

/* Create Tables */

CREATE TABLE  plantacion
(
	ID VARCHAR(10) NOT NULL,
	DESCRIPCION CLOB NOT NULL,
	ESTADO VARCHAR(25) NOT NULL,
    IP VARCHAR(16) NULL,
    LATITUD NUMBER(10,7) NULL,
	LONGITUD NUMBER(10,7) NULL
)
;

CREATE TABLE  sgm_operacional
(
	ID NUMBER(10) NOT NULL,
	PLANTACIONID VARCHAR(10) NOT NULL,
	FECHA DATE NOT NULL,
	HUMEDADAMB NUMBER(5,2) NULL,
	TEMPCENT NUMBER(5,2) NULL,
	TEMPFAR NUMBER(5,2) NULL,
	HUMEDADSUELO VARCHAR(4) NULL
)
;

CREATE TABLE  sgm_operativo
(
	ID NUMBER(10) NOT NULL,
	PLANTACIONID VARCHAR(10) NOT NULL,
	FECHA DATE NOT NULL,
	DESCRIPCION CLOB NOT NULL,
	IMAGEN VARCHAR(50) NULL
)
;

/* Create Comments, Sequences and Triggers for Autonumber Columns */

CREATE SEQUENCE SEQ_sgm_operacional_ID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

CREATE OR REPLACE TRIGGER TRG_sgm_operacional_ID 
	BEFORE INSERT 
	ON sgm_operacional 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_sgm_operacional_ID.NEXTVAL 
		INTO :NEW.ID 
		FROM DUAL; 
	END;
/


CREATE SEQUENCE SEQ_sgm_operativo_ID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

CREATE OR REPLACE TRIGGER TRG_sgm_operativo_ID 
	BEFORE INSERT 
	ON sgm_operativo 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_sgm_operativo_ID.NEXTVAL 
		INTO :NEW.ID 
		FROM DUAL; 
	END;
/


/* Create Primary Keys, Indexes, Uniques, Checks, Triggers */

ALTER TABLE  plantacion 
 ADD CONSTRAINT PK_PLANTACION
	PRIMARY KEY (ID) 
 USING INDEX
;

ALTER TABLE  plantacion 
 ADD CONSTRAINT CK_ESTADO CHECK (ESTADO IN ('SIEMBRA', 'EMERGENCIA', 'DESARROLLO VEGETATIVO', 'FLORACION', 'MADURACION','COSECHA'))
;

ALTER TABLE  sgm_operacional 
 ADD CONSTRAINT PK_SGMOPERACIONAL
	PRIMARY KEY (ID) 
 USING INDEX
;

CREATE INDEX IXFK_SGMOPERACIONAL_PLANTACION   
 ON  sgm_operacional (PLANTACIONID) 
;

ALTER TABLE  sgm_operacional 
 ADD CONSTRAINT CK_HUMEDADSUELO CHECK (HUMEDADSUELO IN ('LOW', 'HIGH'))
;

ALTER TABLE  sgm_operativo 
 ADD CONSTRAINT PK_SGMOPERATIVO
	PRIMARY KEY (ID) 
 USING INDEX
;

CREATE INDEX IXFK_SGMOPERATIVO_PLANTACION   
 ON  sgm_operativo (PLANTACIONID) 
;

/* Create Foreign Key Constraints */

ALTER TABLE  sgm_operacional 
 ADD CONSTRAINT FK_SGMOPERACIONAL_PLANTACION
	FOREIGN KEY (PLANTACIONID) REFERENCES  plantacion (ID)
;

ALTER TABLE  sgm_operativo 
 ADD CONSTRAINT FK_SGMOPERATIVO_PLANTACION
	FOREIGN KEY (PLANTACIONID) REFERENCES  plantacion (ID)
;
